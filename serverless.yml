service: kinesis-firehose-stack

custom:
  serverless-offline:
    host: 0.0.0.0
    httpPort: 3096
    corsAllowOrigin: '*'
    corsAllowHeaders: 'accept,content-type,x-api-key,Authorization'
  prune:
    automatic: true
    number: 2

  firehoseDeliveryBucket:
    local: arn:aws:s3:::kinesis-firehose-stack-local

  deploy:
    local: com.kinesis-dev.serverless.${self:provider.region}.deploys

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 128
  stage: ${opt:stage, 'local'}
  region: us-east-1
  environment: ${file(./serverless.${self:provider.stage}.env.yml):environment}
  lambdaHashingVersion: "20201221"
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    skipPolicySetup: false # Prevents creation of default bucket policy when framework creates the deployment bucket. Default is false
    name: ${self:custom.deploy.${self:provider.stage}}  # Deployment bucket name. Default is generated by the framework
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
            - lambda:InvokeAsync
            - s3:getObject
            - s3:putObject
            - firehose:PutRecord
          Resource: "*"

functions:
  - ${file(./serverless.${self:provider.stage}.functions.yml), ""}

resources:
  Resources:
    FirehoseLogGroup:
      Type: AWS::Logs::LogGroup
      Properties: 
        LogGroupName: ${self:service}-${self:provider.stage}-kinesis-firehose-loggroup
        RetentionInDays: 1
            
    FirehoseLogStream:      
      Type: AWS::Logs::LogStream
      Properties: 
        LogStreamName: ${self:service}-${self:provider.stage}-kinesis-firehose-logstream
        LogGroupName: !Ref FirehoseLogGroup
      DependsOn:
        - FirehoseLogGroup

    KinesisFirehoseDeliveryStream:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:service}-${self:provider.stage}-kinesis-firehose
        DeliveryStreamType: DirectPut
        ExtendedS3DestinationConfiguration:
          BucketARN: ${self:custom.firehoseDeliveryBucket.${self:provider.stage}}
          RoleARN: 
            Fn::GetAtt:
              - FirehoseDeliveryIAMRole
              - Arn
          ErrorOutputPrefix: kinesis/error/!{firehose:error-output-type}/
          Prefix: kinesis/
          DynamicPartitioningConfiguration:
            Enabled: false  # Disable dynamic partitioning
          ProcessingConfiguration:
            Enabled: false
          BufferingHints:
            IntervalInSeconds: 60
            SizeInMBs: 100
          CloudWatchLoggingOptions:
            Enabled: true
            LogGroupName: !Ref FirehoseLogGroup
            LogStreamName: !Ref FirehoseLogStream
          CompressionFormat: GZIP
      DependsOn:
      - FirehoseDeliveryIAMPolicy
    
    FirehoseDeliveryIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-kinesis-firehose-iam-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref "AWS::AccountId"
    
    FirehoseDeliveryIAMPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: ${self:service}-${self:provider.stage}-kinesis-firehose-iam-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:AbortMultipartUpload
            - s3:GetBucketLocation
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketMultipartUploads
            - s3:PutObject
            Resource:
            - arn:aws:s3:::kinesis-firehose-stack-${self:provider.stage}
            - arn:aws:s3:::kinesis-firehose-stack-${self:provider.stage}/*
          - Effect: Allow
            Action:
              - 'glue:*'
            Resource: 
              - arn:aws:glue:*:*:table/your_table_name
              - arn:aws:glue:*:*:database/your_database_name
              - arn:aws:glue:*:*:catalog
          - Effect: Allow
            Action:
            - logs:*
            Resource:
            - arn:aws:logs:*:*:log-group:/aws/kinesisfirehose/:*
        Roles:
        - Ref: FirehoseDeliveryIAMRole

plugins:
  - serverless-offline
  - serverless-prune-plugin